#ДОМАШНЕЕ ЗАДАНИЕ (45 задач)

# 1. Создайте список квадратов чисел от 1 до 20 с помощью генератора списков.
# squares = [x ** 2 for x in range(1, 21)]
# print(squares)

# 2. Создайте список четных чисел от 1 до 50.
# num = [x for x in range(1, 51) if x % 2 == 0]
# print(num)

# 3. Создайте список чисел от 1 до 50, заменяя все числа, кратные 3, на 'Fizz'.
# num = [x if x % 3 != 0 else "Fizz" for x in range(1, 51)]
# print(num)

# 4. Создайте список из первых 10 чисел Фибоначчи с помощью генератора списков и цикла.
# num1 = [0, 1]
# num = [num1.append(num1[-1] + num1[-2]) for x in range(1,11)]
# print(num1)

# 5. Запросите у пользователя 5 чисел и сохраните их в список, умножив каждое на 2.
# lst1 = []
# for i in range(1, 6):
#     num = int(input("Enter 5 numbers: "))
#     lst1.append(num * 2)
# print(lst1)

# 6. Запросите у пользователя строку и создайте список, содержащий только гласные буквы.
# lst1 = []
# str1 = input("Enter a word: ")
# for i in str1:
#     if i.lower() in "aeiouy":
#         lst1.append(i)
# print(lst1)

# 7. Создайте словарь, где ключи — числа от 1 до 5, а значения — их квадраты.
# num = [1, 2, 3, 4, 5]
# dic1 = {}
# for i in num:
#     dic1.setdefault(i, i ** 2)
# print(dic1)

# 8. Используя zip(), объедините два списка и создайте из них словарь.
# films = ["Titanic", "Love life"]
# years = [1999, 2020]
# dic1 = {}
# for film, year in zip(films, years):
#     dic1.setdefault(film, year)
# print(dic1)

# 9. Запросите у пользователя 3 пары ключ-значение и сохраните их в словарь.
# dic1 = {}
# for i in range(1, 4):
#     key = input("Enter a key: ")
#     value = input("Enter a value: ")
#     dic1.setdefault(key, value)
# print(dic1)

# 10. Используя enumerate(), создайте список строк формата "Индекс: значение" из списка чисел.
# names = ["Nawal", "Emilie", "Oliver"]
# for index, name in enumerate(names, start = 1):
#     print(f"{index}. {name}")

# 11. Переберите словарь и выведите только те пары, где значение больше 10.
# dict1 = {
#     "apple": 3,
#     "grapes": 12,
#     "pineapples": 23,
#     "lemons": 9
#          }
# for i in dict1.values():
#     if i > 10:
#         print(i)

# 12. Создайте генератор списка, содержащий длины слов в заданной строке.
# str1 = input("Enter a sentence: ")
# str2 = [len(str1)]
# print(str2)

# 13. Переберите список кортежей (имя, возраст) и выведите строки "Имя - возраст".!!!


# 14. Создайте словарь квадратов чисел от 1 до 10.
# dict_squares = {i ** 2 for i in range(1, 11)}
# print(dict_squares)

# 15. Сгенерируйте список кортежей (число, его квадрат) для чисел от 1 до 10.
# str1 = []
# for i in range(1, 11):
#     my_tup = (i, i ** 2)
#     str1.append(my_tup)
# print(str1)

# 16. Запросите у пользователя 5 чисел. Если введено отрицательное число — прекратите ввод (break).
# for i in range(1, 6):
#     num = int(input("Enter a number: "))
#     if num < 0:
#         break

# 17. Используя zip(), объедините два списка в список кортежей.
# films = ["Titanic", "Love life"]
# years = [1999, 2020]
# str1 = []
# for film, year in zip(films, years):
#      my_tup = (film, year)
#      str1.append(my_tup)
# print(str1)

# 18. Переберите словарь с разными типами данных и выведите только числовые значения.!!!


# 19. Используя zip(), создайте словарь из двух списков (названия стран и их столицы).
# countries = ["Canada", "Kyrgyzstan", "Indonesia"]
# towns = ["Ottawa", "Bishkek", "Denpasar"]
# dict1 = {}
# for country, town in zip(countries, towns):
#     dict1.setdefault(country, town)
# print(dict1)

# 20. Запросите у пользователя строку и создайте список её символов в обратном порядке.
# str1 = input("Enter a word: ")
# str2 = str1[::-1]
# str3 = []
# for i in str2:
#     str3.append(i)
# print(str3)

# 21. Используйте генератор списка для создания списка кубов чисел от 1 до 10.
# num1 = [x ** 3 for x in range(1, 11)]
# print(num1)

# 22. Используйте enumerate(), чтобы вывести все элементы списка с их индексами.
# drinks = ["cola", "water", "orange juice"]
# for index, drink in enumerate(drinks, start = 0):
#     print(f"{index}. {drink}")

# 23. Переберите словарь и удалите из него элементы, где значение меньше 5.
# dic1 = {
#     "Nawal": 29,
#     "Eddie": 4
# }
# for i in dic1.values():
#     if i < 5:
#         print(i)
# print(dic1)
# 24. Объедините два списка в список кортежей и отсортируйте его по второму элементу.
# 25. Запросите у пользователя числа, добавляйте их в список, пока не введёт 'стоп' (break).
# nums = []
# while True:
#     num = input("Enter nums")
#     if num == "stop":
#         break
#     else:
#         nums.append(int(num))
# print(nums)

# 26. Запросите у пользователя строку и создайте словарь с подсчетом всех символов.

# 27. Создайте словарь, где ключами будут числа от 1 до 10, а значениями их факториалы.
# dict1 = {}
# for i in range(1, 11):
#     dict1.setdefault(i)

# 28. Создайте список всех слов из строки, начинающихся с определённой буквы.
# 29. Используя zip(), создайте список пар (число, его факториал) для чисел от 1 до 5.
# 30. Создайте список, содержащий произведения пар чисел из двух списков.
# 31. Используйте генератор списка, чтобы получить все чётные числа из списка.
# 32. Переберите словарь и замените все его значения на их квадраты.
# 33. Используя zip(), создайте список пар значений из трёх списков разной длины.
# 34. Запросите у пользователя 10 чисел, если число нечётное — пропустите его (continue).
# 35. Используйте zip(), чтобы поменять местами ключи и значения в словаре.
# 36. Используя генератор списка, создайте список всех четных чисел от 1 до 100.
# 37. Используя zip() и enumerate(), создайте словарь с индексами элементов списка.
# 38. Создайте список кортежей (буква, её ASCII-код) для всех букв алфавита.
# 39. Используя генератор списка, создайте список всех слов длиннее 5 символов.
# 40. Используя zip(), объедините несколько списков и найдите среднее значение каждого набора значений.

# 41. Используйте set(), чтобы оставить только уникальные элементы в списке чисел.
# 42. Запросите у пользователя строку и создайте множество уникальных символов.
# 43. Используйте set(), чтобы найти пересечение двух списков чисел.
# 44. Используйте defaultdict() для создания словаря со значением по умолчанию.
# 45. Создайте вложенный словарь, где ключ — имя человека, а значение — другой словарь с возрастом и городом проживания.
