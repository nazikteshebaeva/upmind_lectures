# ‚úÖ –ó–∞–¥–∞—á–∞: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–∏—Å–∫–∞

# üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é filter_posts(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ posts.json
# –∏ –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
# - –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞
# - –æ–ø–∏—Å–∞–Ω–∏—é –ø–æ—Å—Ç–∞
# - —Ç–µ–≥–∞–º
# - –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
# - –º—É–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –≤ –ø–æ—Å—Ç–µ

# üì• –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
# - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º (—Ç–æ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—é –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è).
# - –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –º—É–∑—ã–∫–∞) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é.
# - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
# - –î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–ì–ì–ì-–ú–ú-–î–î".

# ‚öôÔ∏è –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:
# - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏ ‚Äî –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
# - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ‚Äî –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ValueError.
# - –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º."
# - –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ—Å—Ç—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

# üìÇ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ posts.json:
# [
#     {
#         "name": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –ë–∞–ª–∏",
#         "description": "–ù–µ–∑–∞–±—ã–≤–∞–µ–º–∞—è –ø–æ–µ–∑–¥–∫–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –ë–∞–ª–∏!",
#         "tags": ["#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "#–≤–µ—Å–µ–ª–æ", "#–ª–µ—Ç–æ"],
#         "date_published": "2025-04-20",
#         "music": "Bali Beats"
#     },
#     ...
# ]

# üî• –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
# - –†–∞–±–æ—Ç–∞–µ—Ç —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫.
# - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã.
# - –†–µ–∞–ª–∏–∑—É–µ—Ç –≥–∏–±–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—è–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
# - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.

# üßπ –ù—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:
# - –û—à–∏–±–∫–∏ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã (ValueError).
# - –°–∏—Ç—É–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –≤—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏.
# - –°–∏—Ç—É–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

# üìà –†–µ–∑—É–ª—å—Ç–∞—Ç:
# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Å–ª–æ–≤–∏—è–º.

# def filter_posts():
#     try:
#         with open("posts.json", "r", encoding="utf-8") as file:
#             content = file.read()
#             if not content.strip():
#                 print("File is empty!")
#                 return
#             posts = eval(content)
#     except:
#         print("Error! The file can not be opened! Try again: ")
#         return
#
#     name_filter = input("Name: ").strip().lower()
#     description_filter = input("Description: ").strip().lower()
#     tag_filter = input("Tag (through comma): ").strip().lower()
#     date_filter = input("Date of publication (YYYY-MM-DD): ").strip()
#     music_filter = input("Music: ").strip().lower()
#
#     if not (name_filter or description_filter or tag_filter or date_filter or music_filter):
#         print("Error! You did not enter any filters. Try again: ")
#         return
#
#     results = []
#     for post in posts:
#         if name_filter and name_filter not in post["name"].lower():
#             continue
#         if description_filter and description_filter not in post["description"].lower():
#             continue
#         if tag_filter:
#             tag_list = tag_filter.lower().split(",")
#             tag_list = [tag.strip() for tag in tag_list]
#             post_tags = [tag.lower() for tag in post["tags"]]
#             match_found = False
#             for tag in tag_list:
#                 if tag in post_tags:
#                     match_found = True
#                     break
#             if not match_found:
#                 continue
#         if date_filter and date_filter != post["date_published"]:
#             continue
#         if music_filter and music_filter not in post["music"].lower():
#             continue
#         results.append(post)
#
#     if results:
#         for p in results:
#             print(f"\n{p['name']}")
#             print(f"Description: {p['description']}")
#             print(f"Tags: {', '.join(p['tags'])}")
#             print(f"Date: {p['date_published']}")
#             print(f"Music: {p['music']}")
#     else:
#         print("Error! Posts can not be found!")
#
#
# if __name__ == "__main__":
#     filter_posts()